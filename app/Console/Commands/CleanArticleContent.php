<?php

declare(strict_types=1);

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\ArticleTranslation;
use App\Services\ArticleGeneratorService;

class CleanArticleContent extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'articles:clean-content {--dry-run : Show what would be cleaned without making changes}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Clean HTML artifacts from article content generated by AI';

    /**
     * Execute the console command.
     */
    public function handle(ArticleGeneratorService $generatorService)
    {
        $dryRun = $this->option('dry-run');
        
        if ($dryRun) {
            $this->info('🔍 DRY RUN MODE - No changes will be made');
        }
        
        $this->info('🧹 Cleaning article content...');
        
        // Get all article translations that might have HTML artifacts
        $translations = ArticleTranslation::where('content', 'LIKE', '%```%')
                                         ->orWhere('content', 'LIKE', '%html%')
                                         ->get();
        
        if ($translations->isEmpty()) {
            $this->info('✅ No articles found with HTML artifacts');
            return 0;
        }
        
        $this->info("📝 Found {$translations->count()} translations with potential artifacts");
        
        $cleaned = 0;
        
        foreach ($translations as $translation) {
            $originalContent = $translation->content;
            
            // Use the service's cleaning method
            $reflection = new \ReflectionClass($generatorService);
            $method = $reflection->getMethod('cleanGeneratedContent');
            $method->setAccessible(true);
            $cleanedContent = $method->invoke($generatorService, $originalContent);
            
            if ($originalContent !== $cleanedContent) {
                $this->line("🔧 Cleaning: Article {$translation->article_id} ({$translation->locale})");
                
                if (!$dryRun) {
                    $translation->update(['content' => $cleanedContent]);
                }
                
                $cleaned++;
            }
        }
        
        if ($cleaned > 0) {
            if ($dryRun) {
                $this->info("🎯 Would clean {$cleaned} articles");
                $this->info('Run without --dry-run to apply changes');
            } else {
                $this->info("✅ Cleaned {$cleaned} articles successfully");
            }
        } else {
            $this->info('✅ No cleaning needed');
        }
        
        return 0;
    }
}
