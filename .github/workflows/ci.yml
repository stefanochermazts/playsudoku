name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: PHP 8.3 Test & Coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, curl, fileinfo, openssl, pdo, sqlite, xdebug
          coverage: xdebug
          ini-values: memory_limit=512M

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Prepare Laravel environment
        run: |
          cp .env.example .env
          php -r "file_put_contents('.env', preg_replace('/^DB_CONNECTION=.*/m','DB_CONNECTION=sqlite', file_get_contents('.env')));"
          php -r "file_put_contents('.env', str_replace('# DB_DATABASE=laravel', 'DB_DATABASE='.getcwd().'/database/database.sqlite', file_get_contents('.env')));"
          mkdir -p database storage/logs bootstrap/cache
          touch database/database.sqlite
          php artisan key:generate --force
          php artisan config:cache

      - name: Set directory permissions
        run: chmod -R 755 storage bootstrap/cache

      - name: Run database migrations
        run: php artisan migrate --graceful --no-interaction

      - name: Code Style Check (Pint)
        run: vendor/bin/pint --test

      - name: Run Unit & Feature Tests
        run: vendor/bin/pest --coverage --min=80 --coverage-html=coverage-html --coverage-clover=coverage.xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: tests
          name: PlaySudoku
          fail_ci_if_error: false

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage-html/
            coverage.xml
          retention-days: 30

      - name: Coverage Gate Check
        run: |
          # Extract coverage percentage from Pest output
          COVERAGE=$(vendor/bin/pest --coverage --min=80 | grep -oP 'Tests:.*?(\d+\.\d+)%' | tail -1 | grep -oP '\d+\.\d+')
          echo "Current coverage: ${COVERAGE}%"
          
          # Set minimum coverage threshold
          MIN_COVERAGE=80
          
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below minimum threshold of ${MIN_COVERAGE}%"
            echo "Please add tests to increase coverage"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets minimum threshold of ${MIN_COVERAGE}%"
          fi

  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, curl, fileinfo
          coverage: none

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-dev

      - name: Run PHPStan (Static Analysis)
        run: vendor/bin/phpstan analyse --no-progress
        if: file_exists('vendor/bin/phpstan')

      - name: Run Pint (Code Style)
        run: vendor/bin/pint --test


